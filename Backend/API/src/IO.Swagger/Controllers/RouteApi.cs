/*
 * Digitaler Reiseführer
 *
 * REST Api für den digitalen Reiseführer.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RouteApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new route to the database
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid input</response>
        [HttpPost]
        [Route("/v2/route")]
        [ValidateModelState]
        [SwaggerOperation("AddRoute")]
        [SwaggerResponse(statusCode: 200, type: typeof(Route), description: "Success")]
        public virtual IActionResult AddRoute([FromBody]PostRoute body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Route));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "{\n  \"duration\" : 0.5637377,\n  \"routeID\" : \"routeID\",\n  \"pointOfInterests\" : [ {\n    \"latitude\" : 0.8008281904610115,\n    \"averageRating\" : 1.4658129805029452,\n    \"name\" : \"name\",\n    \"numberOfRatings\" : 5,\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"longitude\" : 6.027456183070403\n  }, {\n    \"latitude\" : 0.8008281904610115,\n    \"averageRating\" : 1.4658129805029452,\n    \"name\" : \"name\",\n    \"numberOfRatings\" : 5,\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"longitude\" : 6.027456183070403\n  } ],\n  \"name\" : \"name\",\n  \"creatorName\" : \"creatorName\",\n  \"description\" : \"description\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Route>(exampleJson)
                        : default(Route);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes the route to a given id
        /// </summary>
        /// <param name="routeID"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/v2/route/{routeID}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteRoute")]
        public virtual IActionResult DeleteRoute([FromRoute][Required]string routeID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets the route to a given id
        /// </summary>
        /// <param name="routeID"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/v2/route/{routeID}")]
        [ValidateModelState]
        [SwaggerOperation("GetRoute")]
        [SwaggerResponse(statusCode: 200, type: typeof(Route), description: "Success")]
        public virtual IActionResult GetRoute([FromRoute][Required]string routeID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Route));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"duration\" : 0.5637377,\n  \"routeID\" : \"routeID\",\n  \"pointOfInterests\" : [ {\n    \"latitude\" : 0.8008281904610115,\n    \"averageRating\" : 1.4658129805029452,\n    \"name\" : \"name\",\n    \"numberOfRatings\" : 5,\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"longitude\" : 6.027456183070403\n  }, {\n    \"latitude\" : 0.8008281904610115,\n    \"averageRating\" : 1.4658129805029452,\n    \"name\" : \"name\",\n    \"numberOfRatings\" : 5,\n    \"description\" : \"description\",\n    \"id\" : \"id\",\n    \"longitude\" : 6.027456183070403\n  } ],\n  \"name\" : \"name\",\n  \"creatorName\" : \"creatorName\",\n  \"description\" : \"description\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Route>(exampleJson)
                        : default(Route);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all routes from the given user
        /// </summary>
        /// <param name="userName"></param>
        /// <response code="200">Success</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/v2/routes/{userName}")]
        [ValidateModelState]
        [SwaggerOperation("GetRoutes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Success")]
        public virtual IActionResult GetRoutes([FromRoute][Required]string userName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
                        : default(List<string>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Edits the route to a given id
        /// </summary>
        /// <param name="body"></param>
        /// <param name="routeID"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid input</response>
        /// <response code="404">Not found</response>
        [HttpPut]
        [Route("/v2/route/{routeID}")]
        [ValidateModelState]
        [SwaggerOperation("PutRoute")]
        public virtual IActionResult PutRoute([FromBody]PostRoute body, [FromRoute][Required]string routeID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
