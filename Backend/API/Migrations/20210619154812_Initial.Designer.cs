// <auto-generated />
using System;
using API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(MariaDbContext))]
    [Migration("20210619154812_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("API.Models.PoIReview", b =>
                {
                    b.Property<Guid>("PoIReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PointOfInterestPoIID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PoIReviewId");

                    b.HasIndex("PointOfInterestPoIID");

                    b.ToTable("PoIReview");
                });

            modelBuilder.Entity("API.Models.PointOfInterest", b =>
                {
                    b.Property<Guid>("PoIID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("AverageRating")
                        .IsRequired()
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Latitude")
                        .IsRequired()
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Longitude")
                        .IsRequired()
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NumberOfRatings")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PoIID");

                    b.ToTable("PointOfInterest");
                });

            modelBuilder.Entity("API.Models.RoleModel", b =>
                {
                    b.Property<string>("CreatorName")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RequestedRole")
                        .HasColumnType("int");

                    b.HasKey("CreatorName");

                    b.ToTable("RoleRequests");
                });

            modelBuilder.Entity("API.Models.Route", b =>
                {
                    b.Property<Guid>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("AverageRating")
                        .IsRequired()
                        .HasColumnType("double");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float?>("Duration")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NumberOfRatings")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Polyline")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RouteID");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("API.Models.RoutePoIConnector", b =>
                {
                    b.Property<Guid>("PoIID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RouteID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("PoIID", "RouteID", "Order");

                    b.ToTable("ConnectionsRoutePoI");
                });

            modelBuilder.Entity("API.Models.RouteReview", b =>
                {
                    b.Property<Guid>("RouteReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("RouteID")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RouteReviewId");

                    b.HasIndex("RouteID");

                    b.ToTable("RouteReview");
                });

            modelBuilder.Entity("API.Models.PoIReview", b =>
                {
                    b.HasOne("API.Models.PointOfInterest", "PointOfInterest")
                        .WithMany()
                        .HasForeignKey("PointOfInterestPoIID");

                    b.Navigation("PointOfInterest");
                });

            modelBuilder.Entity("API.Models.RouteReview", b =>
                {
                    b.HasOne("API.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.Navigation("Route");
                });
#pragma warning restore 612, 618
        }
    }
}
