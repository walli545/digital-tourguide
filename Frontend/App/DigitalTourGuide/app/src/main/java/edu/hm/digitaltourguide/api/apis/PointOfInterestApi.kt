/**
 * Digitaler Reiseführer
 * REST Api für den digitalen Reiseführer.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package edu.hm.digitaltourguide.api.apis

import edu.hm.digitaltourguide.api.infrastructure.*
import edu.hm.digitaltourguide.api.models.PointOfInterest
import edu.hm.digitaltourguide.api.models.PostPointOfInterest

import io.swagger.client.infrastructure.*

class PointOfInterestApi(basePath: String = "https://SERVER/v2") : ApiClient(basePath) {

    /**
     * Add a new poi to the database
     * 
     * @param body  
     * @return void
     */
    fun addPoI(body: PostPointOfInterest) {
        val localVariableBody: Any = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pointOfInterest"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes the poi to a given id
     * 
     * @param poiID  
     * @return void
     */
    fun deletePoI(poiID: Int) {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/pointOfInterest/{poiID}".replace("{" + "poiID" + "}", "$poiID")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Gets the poi to a given id
     * 
     * @param poiID  
     * @return PointOfInterest
     */
    @Suppress("UNCHECKED_CAST")
    fun getPoI(poiID: Int): PointOfInterest {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/pointOfInterest/{poiID}".replace("{" + "poiID" + "}", "$poiID")
        )
        val response = request<PointOfInterest>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PointOfInterest
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get all poi's from the given user
     * 
     * @param userName  
     * @return kotlin.Array<kotlin.Int>
     */
    @Suppress("UNCHECKED_CAST")
    fun getPoIs(userName: String): Array<Int> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/pointOfInterest/{userName}".replace("{" + "userName" + "}", userName)
        )
        val response = request<Array<Int>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<Int>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Edits the poi to a given id
     * 
     * @param body  
     * @param poiID  
     * @return void
     */
    fun putPoI(body: PostPointOfInterest, poiID: Int) {
        val localVariableBody: Any = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/pointOfInterest/{poiID}".replace("{" + "poiID" + "}", "$poiID")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
